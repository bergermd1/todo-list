(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),r=n.n(o),c=n(645),i=n.n(c)()(r());i.push([e.id,"* {\n    padding: 0;\n    margin: 0;\n}\n\n.project {\n    border: solid thin;\n    display: inline-block;\n    padding: 10px;\n}\n\n.project-container {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-rows: 50px 1fr;\n    border: solid;\n    display: none;\n}\n\n.project-header {\n    grid-column: 1 / 3;\n    justify-self: center;\n    align-self: center;\n}\n\nfieldset {\n    border: none;\n}\n\n.check-list-container {\n    border: solid thin;\n}\n\n.details > li {\n    margin-left: 20px;\n}\n\n.strike {\n    text-decoration: line-through;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,4BAA4B;IAC5B,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,6BAA6B;AACjC",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n}\n\n.project {\n    border: solid thin;\n    display: inline-block;\n    padding: 10px;\n}\n\n.project-container {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-rows: 50px 1fr;\n    border: solid;\n    display: none;\n}\n\n.project-header {\n    grid-column: 1 / 3;\n    justify-self: center;\n    align-self: center;\n}\n\nfieldset {\n    border: none;\n}\n\n.check-list-container {\n    border: solid thin;\n}\n\n.details > li {\n    margin-left: 20px;\n}\n\n.strike {\n    text-decoration: line-through;\n}"],sourceRoot:""}]);const a=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);o&&i[u[0]]||(void 0!==c&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=c),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var c={},i=[],a=0;a<e.length;a++){var d=e[a],s=o.base?d[0]+o.base:d[0],u=c[s]||0,l="".concat(s," ").concat(u);c[s]=u+1;var p=n(l),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var f=r(m,o);o.byIndex=a,t.splice(a,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var c=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<c.length;i++){var a=n(c[i]);t[a].references--}for(var d=o(e,r),s=0;s<c.length;s++){var u=n(c[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}c=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),c=n(569),i=n.n(c),a=n(565),d=n.n(a),s=n(216),u=n.n(s),l=n(589),p=n.n(l),m=n(426),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=u(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const A=[];let h=0;function v(e,t,n,o,r){const c=h;return h++,{id:c,title:e,dueDate:t,description:n,priority:o,notes:r,todos:{"Todo 1":!1,"Todo 2":!0,"Todo 3":!1}}}function y(e,t){delete C(e).todos[t]}function C(e){return A.filter((t=>t.id==e))[0]}function b(e){const t=document.createElement("div");t.classList.add("project"),t.setAttribute("data-id",e.id);const n=document.createElement("p");n.textContent=e.title;const o=document.createElement("p");o.textContent=e.dueDate;const r=document.createElement("button");r.textContent="View Project",r.classList.add("viewBtn");const c=document.createElement("button");return c.textContent="Remove Project",c.classList.add("removeBtn"),t.appendChild(n),t.appendChild(o),t.appendChild(r),t.appendChild(c),t}function E(){j(),function(){const e=[];return A.forEach((t=>{e.push(b(t))})),e}().forEach((e=>{document.querySelector(".projects-container").appendChild(e),e.querySelector(".removeBtn").addEventListener("click",(()=>{!function(e){const t=A.indexOf(C(e));A.splice(t,1)}(e.getAttribute("data-id")),E()})),e.querySelector(".viewBtn").addEventListener("click",(()=>{g(e.getAttribute("data-id"))}))}))}function g(e){document.querySelector("#add-project-button").style.display="none",document.querySelector(".project-container").style.display="grid",j();const t=document.createElement("h2");t.classList.add("project-header"),t.textContent=C(e).title,document.querySelector(".project-container").appendChild(t),function(e){const t=function(e){const t=document.createElement("div");t.classList.add("check-list-container");const n=document.createElement("fieldset");n.legend="Check list",n.classList.add("check-list"),t.appendChild(n);for(const t in e.todos){const e=document.createElement("div"),o=document.createElement("label");o.textContent=t,o.addEventListener("click",(()=>{[...o.classList].includes("strike")?o.classList.remove("strike"):o.classList.add("strike")}));const r=document.createElement("input");r.type="radio",r.value=t,r.name="todos",e.appendChild(r),e.appendChild(o),n.appendChild(e)}return t}(e),n=function(e){const t=document.createElement("div");t.classList.add("details-container");const n=document.createElement("ul");n.textContent="Details",n.classList.add("details"),t.appendChild(n);const o=function(e){const t=[],n={description:"Description",dueDate:"Due date",priority:"Priority",notes:"Notes"};for(let o in n){const r=document.createElement("li");r.textContent=n[o]+": "+e[o],t.push(r)}return t}(e);return o.forEach((e=>{n.append(e)})),t}(e);return[t,n,function(){const e=document.createElement("div");e.classList.add("buttons-container");const t=document.createElement("button");t.id="return-button",t.textContent="Return to projects page";const n=document.createElement("button");n.id="add-todo-button",n.textContent="Add todo";const o=document.createElement("button");o.id="remove-todo-button",o.textContent="Remove todo";const r=document.createElement("button");return r.id="move-todo-up-button",r.textContent="Move up",e.appendChild(t),e.appendChild(n),e.appendChild(o),e.appendChild(r),e}()]}(C(e)).forEach((e=>{document.querySelector(".project-container").appendChild(e)})),document.querySelector("#return-button").addEventListener("click",(()=>{document.querySelector("#add-project-button").style.display="block",document.querySelector(".project-container").style.display="none",E()})),document.querySelector("#add-todo-button").addEventListener("click",(()=>{const t=window.prompt("Enter new todo");!function(e,t){C(e).todos[t]=!1}(e,t),g(e)})),document.querySelector("#remove-todo-button").addEventListener("click",(()=>{const t=document.querySelector(".check-list");for(const n of t.children)n.querySelector("input").checked&&(n.remove(),y(e,n.querySelector("input").value))}))}function j(){document.querySelector(".projects-container").innerHTML="",document.querySelector(".project-container").innerHTML=""}window.onload=()=>{document.querySelector("#content").appendChild(function(){const e=document.createElement("button");return e.id="add-project-button",e.textContent="Add new project",e.addEventListener("click",(()=>{const e={};e.title=window.prompt("Title?"),e.description=window.prompt("Description?"),e.dueDate=window.prompt("Due date?"),e.priority=window.prompt("Priority?"),e.notes=window.prompt("Notes?"),function(e){const t=new v(e.title,e.dueDate,e.description,e.priority,e.notes);A.push(t)}(e),E()})),e}());const e=document.createElement("div");e.classList.add("projects-container"),document.querySelector("#content").appendChild(e);const t=document.createElement("div");t.classList.add("project-container"),document.querySelector("#content").appendChild(t),function(){const e=new v("Blank project","12/31/2023","Blank description",0,"");A.push(e),b(e)}(),E()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,